name: Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag name (e.g., v1.0.0)'
        required: true
        type: string
      release_name:
        description: 'Release name'
        required: true
        type: string
  push:
    tags:
      - 'v*'

env:
  CI: true

jobs:
  release:
    name: Create Release (${{ matrix.os }}, ${{ matrix.name }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            name: linux
            extension: ""
            generator: "Unix Makefiles"

          - os: windows-2022
            name: windows
            extension: ".exe"
            generator: "Ninja"

          - os: macos-latest
            name: macos
            extension: ""
            generator: "Unix Makefiles"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup ccache
        uses: actions/cache@v3
        with:
          path: |
            ~/.ccache
            ${{ runner.os == 'Windows' && 'C:/ccache' || '~/.ccache' }}
          key: release-${{ matrix.os }}-${{ github.sha }}
          restore-keys: |
            release-${{ matrix.os }}-
            release-

      - name: Get version from tag
        shell: bash
        id: version
        run: |
          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            VERSION="${{ github.event.inputs.tag_name }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Version: $VERSION"

      - name: Set up build environment
        shell: bash
        id: build-env
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "package-dir=${{ github.workspace }}/package" >> "$GITHUB_OUTPUT"

      # Linux setup
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build \
            libgl1-mesa-dev libx11-dev libxrandr-dev libxinerama-dev \
            libxcursor-dev libxi-dev libasound2-dev libglu1-mesa-dev \
            libwayland-dev libxkbcommon-dev libegl1-mesa-dev \
            pkg-config ccache libgtk-3-dev libdrm-dev libgbm-dev \
            libxext-dev libxfixes-dev libxrender-dev libxcomposite-dev \
            libxdamage-dev libxtst-dev libxss-dev libgconf-2-4

      # Windows setup
      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-2022'
        run: |
          choco install cmake ninja ccache --no-progress

      # macOS setup
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install cmake ninja ccache

      - name: Clear CMake cache
        shell: bash
        run: |
          echo "üßπ Starting comprehensive cache cleanup..."

          # Clear build directory completely
          rm -rf "${{ steps.build-env.outputs.build-output-dir }}"
          rm -rf ".deps"
          rm -rf "${{ github.workspace }}/.deps"
          rm -rf "${{ github.workspace }}/build"

          # Clear any leftover CMake cache files in workspace
          echo "üìÅ Searching for CMake cache files..."
          find "${{ github.workspace }}" -name "CMakeCache.txt" -delete -print 2>/dev/null || true
          find "${{ github.workspace }}" -name "CMakeFiles" -type d -exec rm -rf {} + -print 2>/dev/null || true
          find "${{ github.workspace }}" -name "cmake_install.cmake" -delete -print 2>/dev/null || true
          find "${{ github.workspace }}" -name "_deps" -type d -exec rm -rf {} + -print 2>/dev/null || true

          # Windows-specific cleanup (Visual Studio files)
          if [[ "${{ matrix.os }}" == "windows-2022" ]]; then
            echo "ü™ü Performing Windows-specific cleanup..."
            find "${{ github.workspace }}" -name "*.vcxproj" -delete -print 2>/dev/null || true
            find "${{ github.workspace }}" -name "*.sln" -delete -print 2>/dev/null || true
            find "${{ github.workspace }}" -name ".vs" -type d -exec rm -rf {} + -print 2>/dev/null || true
            find "${{ github.workspace }}" -name "Debug" -type d -exec rm -rf {} + -print 2>/dev/null || true
            find "${{ github.workspace }}" -name "Release" -type d -exec rm -rf {} + -print 2>/dev/null || true
          fi

          echo "‚úÖ CMake cache cleared completely"

      - name: Create build and package directories
        run: |
          mkdir -p "${{ steps.build-env.outputs.build-output-dir }}"
          mkdir -p "${{ steps.build-env.outputs.package-dir }}"

      - name: Configure CMake for release
        shell: bash
        run: |
          echo "üîß Configuring CMake for release build on ${{ matrix.os }}"

          # Determine generator for Windows
          if [[ "${{ matrix.os }}" == "windows-2022" ]]; then
            GENERATOR="Ninja"
          else
            GENERATOR="Unix Makefiles"
          fi

          cmake -B "${{ steps.build-env.outputs.build-output-dir }}" \
            -G "$GENERATOR" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_INSTALL_PREFIX="${{ steps.build-env.outputs.package-dir }}" \
            -DBUILD_TESTS=OFF \
            -DBUILD_BENCHMARKS=OFF \
            -DBUILD_MAP_EDITOR=ON \
            -DENABLE_OPTIMIZATIONS=ON \
            -DENABLE_UNITY_BUILD=OFF \
            -DENABLE_WARNINGS=OFF \
            -DENABLE_DEV_TOOLS=OFF \
            -DENABLE_DEBUG_INFO=OFF \
            -DCPACK_PACKAGE_VERSION="${{ steps.version.outputs.version }}" \
            -S "${{ github.workspace }}"

      - name: Build release binaries
        shell: bash
        run: |
          # Determine parallel jobs based on platform
          if [[ "${{ matrix.os }}" == "windows-2022" ]]; then
            PARALLEL_JOBS=8
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            PARALLEL_JOBS=4
          else
            PARALLEL_JOBS=$(nproc 2>/dev/null || echo 4)
          fi

          echo "üèóÔ∏è Building release targets with $PARALLEL_JOBS parallel jobs..."

          cmake --build "${{ steps.build-env.outputs.build-output-dir }}" \
            --config Release \
            --target ChainedDecos ChainedDecosMapEditor \
            --parallel "$PARALLEL_JOBS"

      - name: Install to package directory
        shell: bash
        run: |
          cmake --install "${{ steps.build-env.outputs.build-output-dir }}" \
            --config Release \
            --component Runtime

      - name: Package binaries
        shell: bash
        run: |
          cd "${{ steps.build-env.outputs.package-dir }}"

          # Create platform-specific package name
          PACKAGE_NAME="ChainedDecos-${{ steps.version.outputs.version }}-${{ matrix.name }}"

          echo "üì¶ Creating package: $PACKAGE_NAME"

          if [[ "${{ matrix.os }}" == "windows-2022" ]]; then
            # Windows: Create ZIP package
            powershell -Command "
              Compress-Archive -Path 'bin/*','share/' -DestinationPath '${{ steps.build-env.outputs.package-dir }}/$PACKAGE_NAME.zip' -Force
            "
            echo "‚úÖ Created Windows ZIP package"

          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # macOS: Create tar.gz package
            tar -czf "${{ steps.build-env.outputs.package-dir }}/$PACKAGE_NAME.tar.gz" \
              -C bin . -C ../share .
            echo "‚úÖ Created macOS tar.gz package"

          else
            # Linux: Create tar.gz package
            tar -czf "${{ steps.build-env.outputs.package-dir }}/$PACKAGE_NAME.tar.gz" \
              -C bin . -C ../share .
            echo "‚úÖ Created Linux tar.gz package"
          fi

      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-${{ matrix.name }}
          path: |
            ${{ steps.build-env.outputs.package-dir }}/*.zip
            ${{ steps.build-env.outputs.package-dir }}/*.tar.gz
          retention-days: 30

      - name: Create GitHub release (Ubuntu only)
        if: matrix.os == 'ubuntu-22.04' && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ steps.build-env.outputs.package-dir }}/*.zip
            ${{ steps.build-env.outputs.package-dir }}/*.tar.gz
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
